
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000827  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072b  00000000  00000000  000009fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
	_delay_ms(1);                      /* Wait a little bit :) */
	return ADCW;                       /* Return ADC word */
}
  80:	17 b8       	out	0x07, r1	; 7
  82:	87 e8       	ldi	r24, 0x87	; 135
  84:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  8e:	08 95       	ret

00000090 <USART_Init>:
}

//------------------------------------------------------------------------------------------------------------------------------
void USART_Init(unsigned int ubrr){
	// set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	// enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	// set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  a4:	08 95       	ret

000000a6 <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <USART_Transmit+0x4>
	UDR0 = data;
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b4:	08 95       	ret

000000b6 <main>:


int main(void)
{	
	// initialize serial connection
	USART_Init(MYUBRR);
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	// initialize Analog digital convector
	ADC_Init();
  be:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>
	float t;
    while (1) 
    {	
		t = 4;
		USART_Transmit((char) t);
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
  ca:	fb cf       	rjmp	.-10     	; 0xc2 <main+0xc>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
